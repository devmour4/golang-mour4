


ExplicaÃ§Ã£o da linha onde o JSON pega os dados do usuario, transforma em uma pessoa e armazena o objeto(a pessoa) convertido na variÃ¡vel client
   err := json.NewDecoder(r.Body).Decode(&client) //pega os dados de requisiÃ§Ã£o do body(json), transforma os JSON em uma pessoa (Person)
	   if err != nil { 
		http.Error(w, "Erro ao processar JSON: formato invÃ¡lido", http.StatusBadRequest)
	}

   //como eu adcionei a variavel err na linha do json, e fiz o laÃ§o no if, eu verifico se tem erros e informo ao usuÃ¡rio se houve ou nÃ£o um problema

	ğŸ”¹ json.NewDecoder(r.Body) cria um decodificador JSON que lÃª r.Body.
   ğŸ”¹ .Decode(&person) transforma os dados JSON no objeto Person dentro do Go

ExplicaÃ§Ã£o da linha onde gero o ID do usuÃ¡rio automaticamente com base no tamanho da lista
   client.ID = "client_" + strconv.Itoa(len(clients)+1)
         ğŸ”¹len(clients) â†’ Conta quantos clientes jÃ¡ existem na lista clients.         
         ğŸ”¹+1 â†’ Adiciona 1 ao total para garantir que o novo cliente tenha um ID Ãºnico.         
         ğŸ”¹strconv.Itoa(len(clients)+1) â†’ Converte esse nÃºmero para uma string, pois len(clients)+1 Ã© um inteiro (int) e precisa ser transformado em texto.       
         ğŸ”¹"client_" + ... â†’ Adiciona o prefixo "client_" antes do nÃºmero, criando um ID legÃ­vel.        
         ğŸ”¹client.ID = ... â†’ Atribui o ID gerado ao novo cliente, garantindo que ele tenha um identificador Ãºnico na lista
